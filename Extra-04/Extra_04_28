'''Weiyou Dai
ID#: 1238034
Status: working
'''

#<METADATA>
QUIET_VERSION = "0.1"
PROBLEM_NAME = "Heuristics"
PROBLEM_VERSION = "0.1"
PROBLEM_AUTHORS = ['Weiyou Dai']
PROBLEM_CREATION_DATE = "22-APR-2015"
PROBLEM_DESC=""

#</METADATA>


# creates an initial state
CREATE_INITIAL_STATE = lambda : [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]]


def DESCRIBE_STATE(state):
  txt = "\n"
  txt += str(state[0]) + " " + str(state[1]) + " " + str(state[2]) + "\n"
  txt += str(state[3]) + " " + str(state[4]) + " " + str(state[5]) + "\n"
  txt += str(state[6]) + " " + str(state[7]) + " " + str(state[8]) + "\n"
  return txt

def DEEP_EQUALS(s1,s2):
  for i in range(9):
      for j in range(9):
          if s2[i][j] != s1[i][j]:
              return False
  return True

def HASHCODE(s):
    txt = ''
    for i in range(9):
        txt += str(s[i])
    return txt

def copy_state(s):
  copy = []
  for i in range(9):
      innerCopy = []
      for j in range(9):
          innerCopy.append(s[i][j])
      copy.append(innerCopy)
  return copy

def goal_test(s):
    # Test whether there is 0 at the goal state, if there is, return false; otherwise return true;
    for i in range(9):
        if 0 in s[i]:
            return False

    for h in range(9):
        sum = 0
        for j in range(9):
            sum += s[h][j]
        if sum != 45:
            return False

    for x in range(9):
        total = 0
        for y in range(9):
            total += s[y][x]
        if total != 45:
            return False
    for p in range(0, 8, 3):
        for q in range(0, 8, 3):
            box = box_array(s, p, q)
            for index in range(9):
                sum += box[index]
            if (sum != 45):
                return False
    return True

def goal_message(s):
    return "Mission achieved"
GOAL_TEST = lambda s: goal_test(s)
GOAL_MESSAGE_FUNCTION = lambda s: goal_message(s)



def can_place(s, number, location):
    '''Tests whether it's legal to move a disk in state s
       from the From peg to the To peg.'''
   # try:
    row = location[0]
    col = location[1]
    if s[row][col] != 0: return False
    if number in s[row]: return False
    row_array = []
    for i in range(9):
        row_array.append(s[i][col])
    if number in row_array: return False
    box = box_array(s, row, col)
    if number in box: return False
    return True
    #except (Exception) as e:
   #     print(e)


def move(s, number, location):
    '''Assuming it's legal to make the move, this computes
       the new state resulting from moving the topmost disk
       from the From peg to the To peg.'''
    news = copy_state(s)  # start with a deep copy.
    row = location[0]
    col = location[1]
    news[row][col] = number
    return news  # return new state

def which_box(row, col):
    return 3 * (row // 3) + (col // 3)

def box_array(s, row, col):
    box = which_box(row, col)
    array = []
    start_row = box // 3
    start_col = box % 3 * 3
    for i in range(start_row, start_row + 3):
        array.append(s[i][start_col])
        array.append(s[i][start_col+1])
        array.append(s[i][start_col+2])
    return array

class Operator:
    def __init__(self, name, precond, state_transf):
        self.name = name
        self.precond = precond
        self.state_transf = state_transf

    def is_applicable(self, s):
        return self.precond(s)

    def apply(self, s):
        return self.state_transf(s)

#OPERATORS = [Operator(-1), Operator(1), Operator(3), Operator(-3)]

def h_manhattan(s):
    total = 0
    for goal in range(0, 9):
        i = 0
        while(s[i] != goal):
            i = i + 1
        rowDelta = abs(i//3 - goal//3)
        colDelta = abs(i%3 - goal%3)
        total += rowDelta + colDelta
    return total

def h_hamming(s):
    total = 0
    for i in range(0, 9):
        if s[i] != i:
            total = total + 1
    return total

def h_euclidean(s):
    total = 0
    for goal in range(0, 9):
        i = 0
        while(s[i] != goal):
            i = i + 1
        total += ( ((i//3 - goal//3)**2) + ((i%3 - goal%3)**2) )**0.5
    return total


# <OPERATORS>
numbers = range(1, 9)
locations = [(row, col) for row in range(9) for col in range(9)]
OPERATORS = [Operator("Place " + str(i) + " at " + str(l),
                      lambda s, i=i, l=l: can_place(s, i, l),
                      # The default value construct is needed
                      # here to capture the values of p&q separately
                      # in each iteration of the list comp. iteration.
                      lambda s, i=i, l=l: move(s, i, l))
             for i in numbers for l in locations]
# </OPERATORS>


HEURISTICS = {'h_euclidean': h_euclidean, 'h_hamming':h_hamming, 'h_manhattan':h_manhattan}
